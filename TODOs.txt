What currently works/is good?
1. Modularity 
    a. API for backends to implement/keeping connections generic enough for easy changing of that
2. Multithreading
3. Rough structure of a controlling server that handles each thread in a separate child class


What doesn't work
1. Inter-session communication is very difficult
2. Generate inefficiency in backends when doing network sync logic over server and not backends
    -> Lower scope of what the server does vs. what the backends do?
    -> generally reduce usage of primitive API functions in server when possible
3. Communication structure is lacking/complicated/not adaptive
    -> Need a way to keep simplicity, while still allowing:
        a. ease of expansion
        b. light weight on net-traffic
        c. some complex operations (within reason)
    -> Reduce the # of manager-specific commands, its become kind of bloated
4. For the SSH transport, security is not really good when using passwords
    -> Transfer over to using keys
5. Logic for ConnectionInstance is bloated/faulty, so need reworking
6. Keep classes lean/mean/chad
7. File structure for project is pretty atrocious
8. Python GUI is cool, but is it useful?
    -> Would a CLI-based UI be more efficient?
        * Unknown as of now. Both have advantages. TBD later. For now, keep it
9. Misc defunked/unused functionality in server
    -> General use audit might be good
10. Too hard to manually Test
    -> Make it in such a way that components dont need to necessarily know eachother 
    -> Components need to be standalone enough to run tests against
11. Authentication can probably be handled better than a file
    -> Look into database solutions?
12. Compartmentalize functionality better 
    -> ex. Manager handler shouldnt be in the same file as the agent handler
    -> could make a generic handler that takes in a data structure that maps opcodes to functions
        * would require making API generic, which wont be good
13. Keep everything C++ style 
    -> ex. misc.cpp isnt C++, its C
14. Keep code ordering organized/easy to navigate
15. WTF are we gonna do about shells?
    -> How to handle asynchronous netcomms over synchronous connection?
        * could use switch w/ file descriptors
        * maybe make backends use FDs to communicate?
16. Move to easier make system/compiler?


Problems solved with new outline:
1,2,3,5,6,10,12,13,15(kind of)

Unsolved/Misc Problems:
4,7,8,9,11,14,16






//////////////////////// OLD STUFF DOWN HERE //////////////////////////////////


















Current objectives:
    1. Design and setup MainWindow.rev_sh GUI widget
    2. Set up session.req_rvsh to task the reverse shell, and start 2 new listeners
        - One listener for the agent, and one listener for the manager's terminal session
    2a. session.req_rvsh needs to fork a new background terminal process for handling the session
    3. Work on SshTransport->init_reverse_shell
        - One design idea would be to include a third connection type for shells, and sessions that listen on the particular socket would accept multiple connections?
            * that way we could just drop a connection into a wait cycle until the other connection comes through
            * Note that this could be done with multiple listeners too (and that might be better for server-side information handling and flexibility)
        - Note: may need a moderator function that can take input from one thread and pass it to another
        - Maybe through a shared memory chunk? 
    4. Incorporate agent management/information into server
        - maintain a list of awaiting agents in the server and their listening ports
        




Todos:

1. Rework ConnectionInstance::send_loot to only loop once through directory
2. Rework ConnectionInstance::send_loot to use built-in transport functionality
3. Rework ConnectionInstance::agent_handler to use ConnectionInstance functions instead of calling API functions directly
4. Rework Server in order to restart listening services when they end

a. Comment python code for easier maintenence
_____________________________________________________________________________________________________
Current Bugs: 

1. Fix problems related to uncleared server buffers
    * Check out loot downloading

2. Infinite looping happening when consecutive module executions

3. Fix catching of empty data file

4. Fix server not overwriting default agent manifest 

_____________________________________________________________________________________________________
Feature Ideas:

1. Obfuscate client hard-coded values
    * Maybe a simple XOR encrypt-decrypt?
        ** Would be easy, but would include non-encrypted data

2. Add anti-debugging things
    * Test for sandboxing/VM (timed delay, VMWare asm instructions)
        ** Resources for this:
            https://kb.vmware.com/s/article/1009458
            https://www.cyberbit.com/blog/endpoint-security/anti-vm-and-anti-sandbox-explained/

3. Add argparsing onto client 
    * Maybe homebrew in order to keep dependencies low?


_____________________________________________________________________________________________________
Notes:

Check out this method for handling custom methods over multiple processes and fds
https://github.com/curesec/tools/tree/master/aesshell
